@use '../../Styles/_forwards' as *;

//=========================================\\
//=======Individual Component Styles=======\\

//=========================================\\
//=========================================\\

.template-container {
  background-color: var_(inverse-bg1);
  height: 1500px;
}

.template-creator {
  max-width: getVal($width, container);
  margin: getMultiVal($margin, 0, auto);
  display: flex;
  gap: 2.5rem;
}

.template-creator > div {
  margin-top: getVal($margin, xxxl);
}

.template-config {
  background-color: var_(alternate-bg);
  background: var_(alternate-bg);
  width: 450px;
  padding: getVal($padding, xl);
  box-sizing: border-box;
  flex-shrink: 0;
  border-radius: 20px;
  position: relative;
  height: fit-content;
  z-index: getVal($z-index, xl);

  &::after {
    content: '';
    display: block;
    border-radius: 20px;
    position: absolute;
    left: calc(-100vw + getVal($padding, l) + 450px);
    top: 0;
    box-shadow:
      rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,
      rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,
      rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;
    background-color: inherit;
    background: inherit;
    height: 100%;
    width: 100vw;
    z-index: getVal($z-index, s);
  }
}

.template-stage {
  padding: getMultiVal($padding, xxxl, xss, xss, l);
  flex-grow: 1;
  overflow-x: scroll;
  box-shadow: inset -12px 0 15px -5px rgba(0, 0, 0, 0.7);
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 20px;
    width: v;
    background-color: var(--inverse-bg1);
    z-index: getVal($z-index, xl);
    overflow: hidden;
  }

  > div:first-child {
    margin-bottom: getVal($margin, m);
  }
}

.template-config h2 {
  margin: getMultiVal($margin, xsss, xsss, xl, xsss);
  @include setTypography(accent-font, s, inverse-txt2, null, xxxl);
}

.config-columns {
  display: flex;
  justify-content: space-between;

  > div {
    display: flex;
    flex-direction: column;
    color: var_(inverse-txt2);

    &:nth-child(2) {
      align-items: flex-end;
    }

    > * {
      height: 50px;
      display: inline-block;
      white-space: nowrap;
    }
  }
}

.template-scale-preview {
  display: flex;
  white-space: nowrap;
  align-items: baseline;

  > div {
    vertical-align: middle !important;

    &:first-child {
      margin-right: getVal($margin, xxxs);
    }

    &:first-child,
    &:nth-child(2) {
      width: 30px;
      flex-shrink: 0;
    }

    &:nth-child(2) {
      margin-right: calculateVal($margin, 2.5);
      color: var_(dimmed-text2);
    }

    &:nth-child(3) {
      color: var_(inverse-txt2);
    }
  }
}

.typography-inputs {
  select,
  input {
    width: 160px;
    box-sizing: border-box;
    border: 1px solid $c_grey50;
    border-radius: 6px;
    outline: none;
    padding: 0.5em;
    background: $c_white00;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.04);
    color: #000;
    font-family: inherit;
    text-overflow: ellipsis;
  }

  input[type='color'] {
    padding: 0.25em;
  }
}

.typography-decoration-h2 {
  position: absolute;
  background-color: var_(dimmed-text2);
  height: 4px;
  left: 0;
  border-radius: 40px;
}

.typography-styles-container {
  position: relative;
  width: fit-content;
}

.typography-units-inactive,
.typography-units-active {
  padding: getMultiVal($padding, xs, s);
  border-radius: 20px;
  cursor: pointer;
}

.typography-units-active {
  background-color: var_(slight-background);
  transition: background-color 0.3s ease-in-out;
}

.typography-units-inactive {
  background-color: rgba(255, 255, 255, 0);
  transition: background-color 0.3s ease-in-out;
}

#typography-h2-decoration1 {
  width: 95%;
  bottom: 2rem;
}

#typography-h2-decoration2 {
  width: 50%;
  bottom: 1.3rem;
}

#typography-h2-decoration3 {
  width: 25%;
  bottom: 0.6rem;
}
